install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=2))
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=2)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=2)
model
?depmix
<<<<<<< HEAD
=======
<<<<<<< HEAD
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=2)
model
>>>>>>> 1146ffb826b17e1ff7347b2373b33bfe7e3d1d39
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
<<<<<<< HEAD
fittedmodel <- fit(model)
fittedmodel
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fittedmodel <- fit(model)
fittedmodel
summary (fittedmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fdmodel <- fit(model)
fdmodel
summary (fdmodel)
fmodel <- fit(model)
=======
fmodel = fit(model)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
plot(fmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
autoplot(fmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
>>>>>>> 1146ffb826b17e1ff7347b2373b33bfe7e3d1d39
fmodel
summary(fmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
<<<<<<< HEAD
MLEse=standardError(fmodel)
# str(MLEse)
MLEse$par
# str(MLEse)
MLEse$par
round(MLEse$par, 3)
fmodel <- fit(model)
fmodel
summary(fmodel)
? posterior
# Get the estimated state for each timestep
estStates <- posterior(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],  cex=.3)
i= estStates[1,1]
ii= if(i==1){i+1} else {i-1}
estMean1=fmodel@response[[i]][[1]]@parameters$coefficients
estMean2=fmodel@response[[ii]][[1]]@parameters$coefficients
estMeans=rep(estMean1, length(Nile))
estMeans[estStates[,1]==ii]=estMean2
plot(Nile)
title(main="Nile data and HMM estimated means", cex.main=1)
points(time(ITAts), estMeans,  col="blue", cex=.3)
i= estStates[1,1]
ii= if(i==1){i+1} else {i-1}
estMean1=fmodel@response[[i]][[1]]@parameters$coefficients
estMean2=fmodel@response[[ii]][[1]]@parameters$coefficients
estMeans=rep(estMean1, length(ITAts))
estMeans[estStates[,1]==ii]=estMean2
plot(Nile)
title(main="Nile data and HMM estimated means", cex.main=1)
points(time(ITAts), estMeans,  col="blue", cex=.3)
plot(time(ITAts), estStates[,1],  cex=.3)
results_df <- data.frame(time_index=as.numeric(time(ITAts)),
sample_trajectory=y,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=as.numeric(time(ITAts)),
sample_trajectory=ITAbond_nom,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=as.numeric(time(ITAts)),
sample_trajectory="ITAbond_nom",
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
plotobj <- ggplot(results_df, aes(time_index, value)) +
geom_line() + facet_wrap(variable ~ ., scales="free", ncol=1) +
theme_minimal()
plot(plotobj)
results_df <- data.frame(time_index=as.numeric(time(ITAts)),
sample_trajectory=Y,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=as.numeric(time(ITAts)),
sample_trajectory=y,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=as.numeric(time(ITAts)),
sample_trajectory="Nominal Bond Yield (%)",
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
plotobj <- ggplot(results_df, aes(time_index, value)) +
geom_line() + facet_wrap(variable ~ ., scales="free", ncol=1) +
theme_minimal()
plot(plotobj)
i= eststates[1,1]
i= estStates[1,1]
ii= estStates[2,1]
iii=estStates[3,1]
estMean1=fmodel@response[[i]][[1]]@parameters$coefficients
estMean2=fmodel@response[[ii]][[1]]@parameters$coefficients
estMean1=fmodel@response[[i]][[1]]@parameters$coefficients
estMean3=fmodel@response[[iii]][[1]]@parameters$coefficients
estMeans=rep(estMean1, length(ITAts))
estMeans[estStates[,1]==ii]=estMean2
estMeans[estStates[,1]==iii]=estMean3
plot(ITAts)
points(time(ITAts), estMeans, col="blue", cex=.3)
results_df <- data.frame(time_index=time(earthquakes) %>% as.numeric(),
sample_trajectory=earthquakes %>% as.numeric(),
estimated_state=posterior(f.phmm)$state) %>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=time("Year of observation") %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state=posterior(f.phmm)$state) %>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=time("Year of observation") %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state=posterior(fmodel)$state) %>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=time("Year of observation") %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state=posterior(fmodel)$state) %>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
results_df <- data.frame(time_index=time("Year of observation") %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state==estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=time("Year of observation") %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
plotobj?
plotobj?
results_df <- data.frame(time_index=Time %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=Time %>% as.numeric(),
sample_trajectory="Nominal Bond Yield (%)" %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=ITAts(Time) %>% as.numeric(),
sample_trajectory=ITAts(ITAbond_nom) %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=ITAts[Time] %>% as.numeric(),
sample_trajectory=ITAts(ITAbond_nom) %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=ITAts['Time'] %>% as.numeric(),
sample_trajectory=ITAts(ITAbond_nom) %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=ITAts['Time'] %>% as.numeric(),
sample_trajectory=ITAts['ITAbond_nom'] %>% as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
results_df <- data.frame(time_index=ITAts['Time'],
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
results_df <- data.frame(time_index=ITAts['Time'],
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
results_df <- data.frame(time_index=as.numeric(ITAts['Time']),
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_
results_df <- data.frame(time_index=as.numeric(ITAts['Time']),
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
ITAts
HMMdataset
results_df <- data.frame(time_index=as.numeric(HMMdataset['Time']),
sample_trajectory=HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=HMMdataset['Time'],
sample_trajectory=HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time'],
sample_trajectory = HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time']as.numeric(),
results_df <- data.frame(time_index = HMMdataset['Time']%>%as.numeric(),
sample_trajectory = HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time']%>%as.numeric(),
sample_trajectory = HMMdataset['ITAbond_nom']%>%as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
plot(ITAts)
ITAts
results_df <- data.frame(time_index = HMMdataset['Time']%>%as.numeric(),
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time'],
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = ITAts,
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
results_df <- data.frame(time_index = ITAts['Time'],
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
results_df <- data.frame(time_index = time(ITAts),
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
plot(time(ITAts), STATES=estStates[,1],  cex=.3)
plot(time(ITAts), STATES==estStates[,1],  cex=.3)
plot(time(ITAts), estStates[,1],  cex=.3)
plot?
?plot
plot(time(ITAts), estStates[,1],ylab= PREDICTED STATE,  cex=.3)
plot(time(ITAts), estStates[,1],ylab== PREDICTED STATE,  cex=.3)
plot(time(ITAts), estStates[,1],ylab== "PREDICTED STATE",  cex=.3)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",  cex=.3)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel <- fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
results_df <- data.frame(time_index = time(ITAts),
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
ggplot(data=HMMdataset, mapping = aes(x = Time, y = ITAbond_nom, group=1))+geom_line()+labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)")+ scale_x_date(date_labels = "%Y")
ITAts=ts(HMMdataset$ITAbond_nom, start = c(format(HMMdataset$Time[1], "%Y"), format(HMMdataset$Time[1], "%m")), frequency = 12)
invisible(adf.test(ITAts))
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE)
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE, results='asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
for (i in 1 :  3) {
cat('\n')
print(summary(fmodel))
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
for (i in 1 :  3) {
cat('\n')
print(summary(model))
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
for (i in 1 :  3) {
cat('\n')
print(summary(model))
}
install.packages("xtable")
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE)
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
print(xtable(model))
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE)
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
library(xtable)
for (i in 1 :  3) {
cat('\n')
print(summary(model))
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
for (i in 1 :  2) {
cat('\n')
print(model)
}
cat('\n')
print(model)
}
cat('\n')
print(model)
cat('\n')
model
cat('\n')
model
cat('\n')
model
cat('\n')
model
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
cat('\n')
model
detach("package:xtable", unload = TRUE)
library(tinytex)
summary(fmodel)
estStates <- posterior(fmodel)
estStates <- posterior(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
cat('\n')
model
fmodel <- fit(model)
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
=======
fmodel = fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(Time(ITAts),estStates[,1], cex=.3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts),estStates[,1], cex=.3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts),estStates[,1], cex=.3)
plot(ITAts)
=======
>>>>>>> eb1f34b1209e176b02b62268538c6017570f0165
>>>>>>> 1146ffb826b17e1ff7347b2373b33bfe7e3d1d39
