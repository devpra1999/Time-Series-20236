<<<<<<< HEAD
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=2)
model
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
plot(fmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
autoplot(fmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
summary(fmodel)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(Time(ITAts),estStates[,1], cex=.3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts),estStates[,1], cex=.3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel = fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts),estStates[,1], cex=.3)
plot(ITAts)
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
=======
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
results_df <- data.frame(time_index=as.numeric(ITAts['Time']),
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_
results_df <- data.frame(time_index=as.numeric(ITAts['Time']),
sample_trajectory=ITAts['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
ITAts
HMMdataset
results_df <- data.frame(time_index=as.numeric(HMMdataset['Time']),
sample_trajectory=HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index=HMMdataset['Time'],
sample_trajectory=HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time'],
sample_trajectory = HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time']as.numeric(),
results_df <- data.frame(time_index = HMMdataset['Time']%>%as.numeric(),
sample_trajectory = HMMdataset['ITAbond_nom'],
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time']%>%as.numeric(),
sample_trajectory = HMMdataset['ITAbond_nom']%>%as.numeric(),
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
plot(ITAts)
ITAts
results_df <- data.frame(time_index = HMMdataset['Time']%>%as.numeric(),
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = HMMdataset['Time'],
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df <- data.frame(time_index = ITAts,
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
results_df <- data.frame(time_index = ITAts['Time'],
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
results_df <- data.frame(time_index = time(ITAts),
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
results_df
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
plot(time(ITAts), STATES=estStates[,1],  cex=.3)
plot(time(ITAts), STATES==estStates[,1],  cex=.3)
plot(time(ITAts), estStates[,1],  cex=.3)
plot?
?plot
plot(time(ITAts), estStates[,1],ylab= PREDICTED STATE,  cex=.3)
plot(time(ITAts), estStates[,1],ylab== PREDICTED STATE,  cex=.3)
plot(time(ITAts), estStates[,1],ylab== "PREDICTED STATE",  cex=.3)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",  cex=.3)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
fmodel <- fit(model)
fmodel
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
results_df <- data.frame(time_index = time(ITAts),
sample_trajectory = ITAts,
estimated_state=estStates[,1])%>%
gather("variable", "value", -time_index)
ggplot(results_df, aes(time_index, value)) + geom_line() +
facet_wrap(variable ~ ., scales="free", ncol=1) + theme_minimal()
ggplot(data=HMMdataset, mapping = aes(x = Time, y = ITAbond_nom, group=1))+geom_line()+labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)")+ scale_x_date(date_labels = "%Y")
ITAts=ts(HMMdataset$ITAbond_nom, start = c(format(HMMdataset$Time[1], "%Y"), format(HMMdataset$Time[1], "%m")), frequency = 12)
invisible(adf.test(ITAts))
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE)
>>>>>>> b73b166907e730630bf59cfdff04422455b95895
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
<<<<<<< HEAD
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
View(airdataset)
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
st55datset= subset(data=airdataset, station_id==55)
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(data=airdataset, station_id==55)
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
view(st55datset)
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
attach(st55datset)
pm25ts=ts(airdataset$pm25, start = c(format(airdataset$datetime[1], "%Y"), format(airdataset$datetime[1], "%m")), frequency = 12)
=======
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE, results='asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
for (i in 1 :  3) {
cat('\n')
print(summary(fmodel))
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model
for (i in 1 :  3) {
cat('\n')
print(summary(model))
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
for (i in 1 :  3) {
cat('\n')
print(summary(model))
}
install.packages("xtable")
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE)
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
print(xtable(model))
knitr::opts_chunk$set(echo = FALSE,message = FALSE , warning = FALSE)
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
library(xtable)
for (i in 1 :  3) {
cat('\n')
print(summary(model))
}
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
for (i in 1 :  2) {
cat('\n')
print(model)
}
cat('\n')
print(model)
}
cat('\n')
print(model)
cat('\n')
model
cat('\n')
model
cat('\n')
model
cat('\n')
model
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
cat('\n')
model
detach("package:xtable", unload = TRUE)
library(tinytex)
summary(fmodel)
estStates <- posterior(fmodel)
estStates <- posterior(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
model = depmix(ITAts ~ 1, data=data.frame(ITAts), nstates=3)
cat('\n')
model
fmodel <- fit(model)
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(ITAts), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
install.packages("sf")
>>>>>>> b73b166907e730630bf59cfdff04422455b95895
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries","zoo")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
if(!require(zoo)){
install.packages("zoo")
library(zoo)
}
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
st55datset$Time <- as.POSIXct(st55datset$datetime, format = "%Y-%m-%dT%H:%M:%SZ")
## had some troubles with Time, the previous one with T%hh resulted in NA values, had to get rid of hours, but maybe there's a better solution
attach(st55datset)
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
View(daily_avg_ma)
plot(daily_avg_ma)
xmin = min(st55datset$Time)
xmax = max(st55datset$Time)
ymax = max(st55datset$pm25)
p <- ggplot(data=st55datset, aes(x=Time, y=pm25)) +
ggtitle("PM2.5 levels at Station #55") +
geom_rect(aes(xmin=xmin, xmax=xmax, ymin=25, ymax=ymax), fill=adjustcolor("pink",alpha.f=0.9), alpha=.2) +
geom_line() +
annotate(geom="text", x=as.Date("2020-06-17"), y=200, label="Dangerous PM2.5 level", color="darkred") +
geom_hline(yintercept=25, color="darkred") +
scale_y_continuous(expand=c(0,0)) +
scale_x_date(limit=c(as.Date("2020-06-01"),as.Date("2020-09-30")))+
labs(x=NULL, y=NULL)
p
### Time should be fixed and the average(?) of wind taken into account
# windy <- ggplot(data=st55datset, aes(x=Time, y=wind)) +
#   ggtitle("Wind strength") +
#   geom_line() +
#   scale_y_continuous(expand=c(0,0)) +
#   scale_x_date(limit=c(as.Date("2020-06-01"),as.Date("2020-09-30")))+
#   labs(x=NULL, y=NULL)
# windy
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
st55datset$Time <- as.POSIXct(st55datset$datetime, format = "%Y-%m-%dT%H:%M:%SZ")
## had some troubles with Time, the previous one with T%hh resulted in NA values, had to get rid of hours, but maybe there's a better solution
attach(st55datset)
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
<<<<<<< HEAD
view(daily_avg_ma)
plot(pm25ts)
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries","zoo")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
if(!require(zoo)){
install.packages("zoo")
library(zoo)
}
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
ggplot(data=daily_avg_ma, mapping = aes()labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)")+ scale_x_date(date_labels = "%Y")
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
ggplot(data=daily_avg_ma, mapping = aes()+labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)")+ scale_x_date(date_labels = "%Y")
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
ggplot(data=daily_avg_ma, mapping = aes()+labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)"))
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
ggplot(data=daily_avg_ma, labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)"))
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
ggplot(data=daily_avg_ma, labs(title = "Graph 1: 10 year Italian Bond Yield (1997-2019)", x = "Year of observation", y = "Nominal Bond Yield (%)"))
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
p <- ggplot(daily_avg_ma, aes(x=day, y=value)) +
geom_line() +
xlab("")
p
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
is.ts(daily_avg_ma)
=======
View(daily_avg_ma)
plot(daily_avg_ma)
xmin = min(st55datset$Time)
xmax = max(st55datset$Time)
ymax = max(st55datset$pm25)
p <- ggplot(data=st55datset, aes(x=Time, y=pm25)) +
ggtitle("PM2.5 levels at Station #55") +
geom_rect(aes(xmin=xmin, xmax=xmax, ymin=25, ymax=ymax), fill=adjustcolor("pink",alpha.f=0.9), alpha=.2) +
geom_line() +
annotate(geom="text", x=as.POSIXct("2020-06-17"), y=200, label="Dangerous PM2.5 level", color="darkred") +
geom_hline(yintercept=25, color="darkred") +
scale_y_continuous(expand=c(0,0)) +
#  scale_x_date(limit=c(as.POSIXct("2020-06-01 00:00:00"),as.POSIXct("2020-09-30 23:00:00")))+
labs(x=NULL, y=NULL)
p
>>>>>>> b73b166907e730630bf59cfdff04422455b95895
### Time should be fixed and the average(?) of wind taken into account
# windy <- ggplot(data=st55datset, aes(x=Time, y=wind)) +
#   ggtitle("Wind strength") +
#   geom_line() +
#   scale_y_continuous(expand=c(0,0)) +
#   scale_x_date(limit=c(as.Date("2020-06-01"),as.Date("2020-09-30")))+
#   labs(x=NULL, y=NULL)
# windy
<<<<<<< HEAD
?plot
=======
### Time should be fixed and the average(?) of wind taken into account
# windy <- ggplot(data=st55datset, aes(x=Time, y=wind)) +
#   ggtitle("Wind strength") +
#   geom_line() +
#   scale_y_continuous(expand=c(0,0)) +
#   scale_x_date(limit=c(as.Date("2020-06-01"),as.Date("2020-09-30")))+
#   labs(x=NULL, y=NULL)
# windy
knitr::opts_chunk$set(echo = TRUE)
```
>>>>>>> b73b166907e730630bf59cfdff04422455b95895
knitr::opts_chunk$set(echo = FALSE, results = 'asis')
list.of.packages <- c("fpp2", "forecast","ggplot2","depmixS4","tidyverse","dplyr","rlang","tseries","zoo")
if(!require(fpp2)){
install.packages("fpp2")
library(fpp2)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(depmixS4)){
install.packages("depmixS4")
library(depmixS4)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(rlang)){
install.packages("rlang")
library(rlang)
}
if(!require(tseries)){
install.packages("tseries")
library(tseries)
}
if(!require(zoo)){
install.packages("zoo")
library(zoo)
}
<<<<<<< HEAD
plot(scale(daily_avg_ma_pm25), col = "darkgreen", main = "Graph 3: Average Wind Speed (knots/second) at station 55, June-September 2020", xlab = "Time", ylab= "Average Wind Speed (knots/second)")
plot(scale(daily_avg_ma_pm25), col = "darkgreen")
plot(scale(daily_avg_ma_pm25), col = "darkgreen")
plot(scale(daily_avg_ma_pm25), col = "darkgreen")
plot(scale(daily_avg_ma_pm25), col = "darkgreen")
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
?scale
=======
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
st55datset$Time <- as.POSIXct(st55datset$datetime, format = "%Y-%m-%dT%H:%M:%SZ")
## had some troubles with Time, the previous one with T%hh resulted in NA values, had to get rid of hours, but maybe there's a better solution
attach(st55datset)
airdataset=read.csv("https://raw.githubusercontent.com/devpra1999/Time-Series-20236/main/ts_epa_2020_west_sept_fill.csv",header = TRUE)
attach(airdataset)
st55datset= subset(airdataset,station_id==55)
st55datset$Time <- as.POSIXct(st55datset$datetime, format = "%Y-%m-%dT%H:%M:%SZ")
## had some troubles with Time, the previous one with T%hh resulted in NA values, had to get rid of hours, but maybe there's a better solution
attach(st55datset)
pm25ts <- zoo(st55datset$pm25, st55datset$datetime)
daily_avg <- aggregate(pm25ts, as.Date(index(pm25ts)), mean)
daily_avg_ma <- rollmean(daily_avg, k = 24, fill = NA)
View(daily_avg_ma)
plot(daily_avg_ma)
xmin = min(st55datset$Time)
xmax = max(st55datset$Time)
ymax = max(st55datset$pm25)
p <- ggplot(data=st55datset, aes(x=Time, y=pm25)) +
ggtitle("PM2.5 levels at Station #55") +
geom_rect(aes(xmin=xmin, xmax=xmax, ymin=25, ymax=ymax), fill=adjustcolor("pink",alpha.f=0.9), alpha=.2) +
geom_line() +
annotate(geom="text", x=as.POSIXct("2020-06-17"), y=200, label="Dangerous PM2.5 level", color="darkred") +
geom_hline(yintercept=25, color="darkred") +
scale_y_continuous(expand=c(0,0)) +
#  scale_x_date(limit=c(as.POSIXct("2020-06-01 00:00:00"),as.POSIXct("2020-09-30 23:00:00")))+
labs(x=NULL, y=NULL)
p
model = depmix(st55datset~ 1, data=data.frame(st55datset), nstates=3)
model = depmix( data=data.frame(st55datset), nstates=3)
model = depmix(st55datset~ 1, data=st55datset, nstates=3)
model = depmix(st55datset~ 1, data=as.numeric(st55datset), nstates=3)
model = depmix(st55datset~ 1, data=as.numeric(st55datset), nstates=3)
model = depmix(data=as.numeric(st55datset), nstates=3)
model = depmix(st55datset~ 1, data=st55datset, nstates=3)
y=as.numeric(st55datset)
y=(as.numeric(st55datset$pm25),
y=(as.numeric(st55datset$pm25)
model = depmix(y~ 1, data=data.frame(y), nstates=3)
y=as.numeric(st55datset$pm25)
model = depmix(y~ 1, data=data.frame(y), nstates=3)
cat('\n')
model
fmodel <- fit(model)
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(st55datset$Time), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
y=as.numeric(st55datset$pm25)
model = depmix(y~ 1, data=data.frame(y), nstates=2)
cat('\n')
model
fmodel <- fit(model)
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(st55datset$Time), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
plot(time(st55datset$dateTime), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
fmodel <- fit(model)
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(st55datset$dateTime), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
plot(time(st55datset$datetime), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
st55
y=as.numeric(st55datset$pm25)
model = depmix(y~ 1, data=data.frame(y), nstates=3)
cat('\n')
model
fmodel <- fit(model)
summary(fmodel)
estStates <- posterior(fmodel)
plot(time(st55datset$datetime), estStates[,1],ylab= "PREDICTED STATE",xlab="TIME",  cex=.3, type="s")
st55
>>>>>>> b73b166907e730630bf59cfdff04422455b95895
